# Generated by Django 3.1.2 on 2021-08-22 05:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TEdits',
            fields=[
                ('editid', models.AutoField(db_column='EditID', primary_key=True, serialize=False)),
                ('ts_edit', models.DateTimeField()),
                ('siteid', models.IntegerField(db_column='siteID')),
                ('id', models.IntegerField()),
                ('period_from', models.IntegerField()),
                ('period_to', models.IntegerField()),
                ('fieldid', models.IntegerField(db_column='fieldID')),
                ('ts_editstart', models.DateTimeField(db_column='ts_EditStart')),
                ('ts_editend', models.DateTimeField(db_column='ts_EditEnd')),
                ('username', models.CharField(max_length=200)),
                ('comment', models.CharField(blank=True, max_length=2000, null=True)),
                ('newval', models.IntegerField(blank=True, db_column='newVal', null=True)),
                ('newvalfloat', models.FloatField(blank=True, db_column='newValFloat', null=True)),
                ('note', models.CharField(blank=True, max_length=2000, null=True)),
                ('groupid', models.IntegerField(blank=True, db_column='groupID', null=True)),
                ('newval2', models.IntegerField(blank=True, db_column='newVal2', null=True)),
            ],
            options={
                'db_table': 't_Edits',
            },
        ),
        migrations.CreateModel(
            name='TGroups',
            fields=[
                ('groupid', models.IntegerField(db_column='GroupID', primary_key=True, serialize=False)),
                ('siteid', models.IntegerField(blank=True, db_column='SiteID', null=True)),
            ],
            options={
                'db_table': 't_groups',
            },
        ),
        migrations.CreateModel(
            name='TKksnames',
            fields=[
                ('kks_name', models.CharField(db_column='KKS_Name', max_length=50, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=50, null=True)),
            ],
            options={
                'db_table': 't_KKSNames',
            },
        ),
        migrations.CreateModel(
            name='TProvinces',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provinceid', models.IntegerField(blank=True, db_column='ProvinceID', null=True)),
                ('province', models.CharField(blank=True, db_column='Province', max_length=50, null=True)),
            ],
            options={
                'db_table': 't_Provinces',
            },
        ),
        migrations.CreateModel(
            name='TRegions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regioncode', models.IntegerField(blank=True, db_column='RegionCode', null=True)),
                ('regionname', models.CharField(blank=True, db_column='RegionName', max_length=50, null=True)),
            ],
            options={
                'db_table': 't_Regions',
            },
        ),
        migrations.CreateModel(
            name='TSites',
            fields=[
                ('siteid', models.IntegerField(db_column='SiteID', primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='Description', max_length=100)),
                ('doimportflow', models.IntegerField(db_column='doImportFlow')),
                ('dsnid', models.IntegerField(blank=True, db_column='DSNID', null=True)),
                ('strwstagname', models.CharField(blank=True, db_column='strWSTagName', max_length=100, null=True)),
                ('strkwtagname', models.CharField(blank=True, db_column='strkWTagName', max_length=100, null=True)),
                ('streventtagname', models.CharField(blank=True, db_column='strEventTagName', max_length=100, null=True)),
                ('strdsn', models.CharField(blank=True, db_column='strDSN', max_length=100, null=True)),
                ('tz_offsetfromhistorian_h', models.IntegerField(db_column='tz_offsetFromHistorian_h')),
                ('eventmod1000', models.SmallIntegerField(db_column='EventMod1000')),
                ('strstatustagname', models.CharField(blank=True, db_column='strStatusTagName', max_length=100, null=True)),
                ('nnsite1', models.IntegerField(blank=True, db_column='nnSite1', null=True)),
                ('nnsite2', models.IntegerField(blank=True, db_column='nnSite2', null=True)),
                ('albertasmp', models.SmallIntegerField(blank=True, db_column='AlbertaSMP', null=True)),
                ('greencreditstart', models.DateTimeField(blank=True, db_column='GreenCreditStart', null=True)),
                ('greencreditend', models.DateTimeField(blank=True, db_column='GreenCreditEnd', null=True)),
                ('greencredit_cd', models.FloatField(blank=True, db_column='GreenCredit_cd', null=True)),
                ('ppaescalation', models.CharField(blank=True, db_column='PPAEscalation', max_length=200, null=True)),
                ('greencreditstartperiod', models.BigIntegerField(blank=True, db_column='GreenCreditStartPeriod', null=True)),
                ('greencreditendperiod', models.BigIntegerField(blank=True, db_column='GreenCreditEndPeriod', null=True)),
                ('power_in_mw', models.SmallIntegerField(blank=True, db_column='Power_in_MW', null=True)),
                ('importtimeoffset_h', models.IntegerField(blank=True, db_column='importTimeOffset_h', null=True)),
                ('capacity_mw', models.FloatField(blank=True, db_column='Capacity_MW', null=True)),
                ('jvrate', models.FloatField(blank=True, db_column='JVRate', null=True)),
                ('financereportordering', models.IntegerField(blank=True, db_column='FinanceReportOrdering', null=True)),
            ],
            options={
                'db_table': 't_sites',
            },
        ),
        migrations.CreateModel(
            name='TStates',
            fields=[
                ('stateid', models.IntegerField(db_column='StateID', primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, db_column='State', max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('hydrocode', models.IntegerField(blank=True, db_column='hydroCode', null=True)),
            ],
            options={
                'db_table': 't_States',
            },
        ),
        migrations.CreateModel(
            name='TSystems',
            fields=[
                ('systemid', models.IntegerField(db_column='SystemID', primary_key=True, serialize=False)),
                ('system', models.CharField(blank=True, db_column='System', max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('defined_state', models.CharField(blank=True, db_column='Defined State', max_length=255, null=True)),
                ('examples', models.CharField(blank=True, db_column='Examples', max_length=255, null=True)),
                ('definedstateid', models.IntegerField(blank=True, db_column='DefinedStateID', null=True)),
                ('hydrocode', models.IntegerField(blank=True, db_column='hydroCode', null=True)),
                ('systemcategory', models.CharField(blank=True, db_column='SystemCategory', max_length=255, null=True)),
            ],
            options={
                'db_table': 't_Systems',
            },
        ),
        migrations.CreateModel(
            name='TTurbtypes',
            fields=[
                ('turbtypeid', models.FloatField(db_column='TurbTypeID', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('mw', models.FloatField(blank=True, db_column='MW', null=True)),
            ],
            options={
                'db_table': 't_turbTypes',
            },
        ),
        migrations.CreateModel(
            name='TWoprnotes',
            fields=[
                ('siteid', models.IntegerField(db_column='SiteID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('periodid', models.BigIntegerField(db_column='periodID')),
                ('username', models.CharField(db_column='Username', max_length=50)),
                ('note', models.CharField(db_column='Note', max_length=4000)),
                ('ts_utc', models.DateTimeField(blank=True, db_column='ts_UTC', null=True)),
                ('notificationid', models.IntegerField(blank=True, db_column='notificationID', null=True)),
            ],
            options={
                'db_table': 't_WOPRNotes',
                'unique_together': {('siteid', 'id', 'periodid')},
            },
        ),
        migrations.CreateModel(
            name='TSiteconfig',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('turbine', models.CharField(db_column='Turbine', max_length=255)),
                ('kksname', models.CharField(db_column='KKSName', max_length=255)),
                ('turbtypeid', models.IntegerField(db_column='turbTypeID')),
                ('pad', models.IntegerField(blank=True, db_column='Pad', null=True)),
                ('gearboxfrom', models.DateTimeField(blank=True, db_column='GearboxFrom', null=True)),
                ('gearbox_make', models.CharField(blank=True, db_column='Gearbox Make', max_length=255, null=True)),
                ('gearbox_model', models.CharField(blank=True, db_column='Gearbox Model', max_length=255, null=True)),
                ('generatorfrom', models.DateTimeField(blank=True, db_column='GeneratorFrom', null=True)),
                ('generator_make', models.CharField(blank=True, db_column='Generator Make', max_length=255, null=True)),
                ('generator_model', models.CharField(blank=True, db_column='Generator Model', max_length=255, null=True)),
                ('nn1', models.IntegerField(blank=True, null=True)),
                ('nn2', models.IntegerField(blank=True, null=True)),
                ('includeinsitetotals', models.SmallIntegerField(db_column='IncludeInSiteTotals')),
                ('mw', models.DecimalField(blank=True, db_column='MW', decimal_places=3, max_digits=18, null=True)),
                ('siteid', models.ForeignKey(db_column='siteID', on_delete=django.db.models.deletion.DO_NOTHING, to='wopr.tsites')),
            ],
            options={
                'db_table': 't_SiteConfig',
                'unique_together': {('siteid', 'id')},
            },
        ),
        migrations.CreateModel(
            name='TPowercurves',
            fields=[
                ('powercurveid', models.AutoField( primary_key=True )),
                ('siteid', models.IntegerField(db_column='siteID')),
                ('id', models.IntegerField()),
                ('nws_bin', models.DecimalField(decimal_places=1, max_digits=5)),
                ('kw', models.FloatField(blank=True, db_column='kW', null=True)),
                ('kw_min', models.FloatField(blank=True, null=True)),
                ('kw_max', models.FloatField(blank=True, null=True)),
                ('kw_std', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_powerCurves',
                'unique_together': {('id', 'nws_bin')},
            },
        ),
        migrations.CreateModel(
            name='TGroupmembers',
            fields=[
                ('groupid', models.IntegerField(db_column='GroupID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('siteid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 't_GroupMembers',
                'unique_together': {('groupid', 'id')},
            },
        ),
        migrations.CreateModel(
            name='TEventdataEdited',
            fields=[
                ('autoid', models.AutoField(primary_key=True, serialize=False)),
                ('siteid', models.IntegerField(db_column='SiteID')),
                ('id', models.IntegerField(db_column='ID')),
                ('ts_start', models.DateTimeField()),
                ('eventid', models.IntegerField(db_column='EventID')),
                ('param1', models.FloatField(blank=True, null=True)),
                ('param2', models.FloatField(blank=True, null=True)),
                ('stateid', models.IntegerField(blank=True, db_column='StateID', null=True)),
                ('systemid', models.IntegerField(blank=True, db_column='SystemID', null=True)),
                ('ts_end', models.DateTimeField()),
                ('periodid', models.BigIntegerField(db_column='periodID')),
                ('eventkey', models.BigIntegerField(db_column='EventKey')),
                ('statekey', models.BigIntegerField(blank=True, db_column='StateKey', null=True)),
                ('systemkey', models.BigIntegerField(blank=True, db_column='SystemKey', null=True)),
                ('validfrom', models.DateTimeField(db_column='ValidFrom')),
                ('validto', models.DateTimeField(db_column='ValidTo')),
                ('duration_ms', models.IntegerField()),
            ],
            options={
                'db_table': 't_EventData_edited',
                'unique_together': {('siteid', 'id', 'periodid')},
            },
        ),
        migrations.CreateModel(
            name='TEventdata',
            fields=[
                ('autoid', models.AutoField(primary_key=True, serialize=False)),
                ('ts_start', models.DateTimeField()),
                ('eventid', models.IntegerField(db_column='EventID')),
                ('param1', models.FloatField(blank=True, null=True)),
                ('param2', models.FloatField(blank=True, null=True)),
                ('stateid', models.IntegerField(blank=True, db_column='StateID', null=True)),
                ('systemid', models.IntegerField(blank=True, db_column='SystemID', null=True)),
                ('ts_end', models.DateTimeField()),
                ('periodid', models.BigIntegerField(db_column='periodID')),
                ('eventkey', models.BigIntegerField(db_column='EventKey')),
                ('statekey', models.BigIntegerField(blank=True, db_column='StateKey', null=True)),
                ('systemkey', models.BigIntegerField(blank=True, db_column='SystemKey', null=True)),
                ('validfrom', models.DateTimeField(db_column='ValidFrom')),
                ('validto', models.DateTimeField(db_column='ValidTo')),
                ('duration_ms', models.IntegerField()),
                ('id', models.ForeignKey(db_column='ID', on_delete=django.db.models.deletion.DO_NOTHING, to='wopr.tsiteconfig')),
                ('siteid', models.ForeignKey(db_column='SiteID', on_delete=django.db.models.deletion.DO_NOTHING, to='wopr.tsites')),
            ],
            options={
                'db_table': 't_EventData',
            },
        ),
        migrations.CreateModel(
            name='TEventcodes',
            fields=[
                ('autoid', models.AutoField(primary_key=True, serialize=False)),
                ('eventid', models.IntegerField(db_column='EventID')),
                ('description', models.CharField(blank=True, db_column='Description', max_length=500, null=True)),
                ('defaultstateid', models.IntegerField(db_column='DefaultStateID')),
                ('defaultsystemid', models.IntegerField(db_column='DefaultSystemID')),
                ('turbtypeid', models.IntegerField(db_column='TurbTypeID')),
                ('actionid', models.IntegerField(db_column='ActionID')),
                ('eventlevel', models.IntegerField(db_column='EventLevel')),
            ],
            options={
                'db_table': 't_EventCodes',
                'unique_together': {('eventid', 'turbtypeid')},
            },
        ),
        migrations.CreateModel(
            name='TCircuits',
            fields=[
                ('circuitid', models.IntegerField(db_column='CircuitID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('siteid', models.IntegerField(blank=True, db_column='siteID', null=True)),
            ],
            options={
                'db_table': 't_Circuits',
                'unique_together': {('circuitid', 'id')},
            },
        ),
        migrations.CreateModel(
            name='TEnergydata',
            fields=[
                ('ts', models.DateTimeField()),
                ('periodid', models.BigIntegerField(db_column='periodID', db_index=True, primary_key=True, serialize=False)),
                ('nws', models.FloatField(blank=True, null=True)),
                ('kw_net', models.FloatField(blank=True, null=True)),
                ('kw_exp', models.FloatField(blank=True, null=True)),
                ('validfrom', models.DateTimeField(db_column='validFrom')),
                ('validto', models.DateTimeField(db_column='validTo')),
                ('kw_min_exp', models.FloatField(blank=True, db_column='kW_min_exp', null=True)),
                ('curtailed', models.SmallIntegerField()),
                ('edited', models.SmallIntegerField(blank=True, null=True)),
                ('id', models.ForeignKey(db_column='id', on_delete=django.db.models.deletion.DO_NOTHING, to='wopr.tsiteconfig')),
                ('siteid', models.ForeignKey(db_column='siteID', on_delete=django.db.models.deletion.DO_NOTHING, to='wopr.tsites')),
            ],
            options={
                'db_table': 't_EnergyData',
                'unique_together': {('siteid', 'id', 'periodid')},
            },
        ),
    ]
